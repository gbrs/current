#1.3
#include <iostream>
#include <vector>

int main() {
    int n, L = 0, R = 1, mx, l = 0, r = 1, a;
    std::cin >> n;
    std::vector<int> Liste_sum(n + 1);

    for (int i = 1; i <= n; i++) {
        std::cin >> a;
        Liste_sum[i] = Liste_sum[i - 1] + a;
    }

    mx = Liste_sum[R] - Liste_sum[L];

    for (int i = 1; i <= n; i++) {
        if (Liste_sum[i] < Liste_sum[L]) {
            if (Liste_sum[R] - Liste_sum[L] > mx) {
                mx = Liste_sum[R] - Liste_sum[L];
                l = L;
                r = R;
            }
            L = i;
            R = i;
            //std::cout << L << ' ' << R << ' ' << mx << '\n';
            continue;
        }
        if (Liste_sum[i] > Liste_sum[R]) {
            R = i;
            if (Liste_sum[R] - Liste_sum[L] > mx) {
                mx = Liste_sum[R] - Liste_sum[L];
                l = L;
                r = R;
            }
        }
        //std::cout << L << ' ' << R << ' ' << mx << '\n';
    }
    std::cout << l + 1 << ' ' << r << ' ' << mx;
}

=>

-- переусложнил логику программы (ифы в ифах...), сам запутался. Надо было всего 2 ифа.
-- четко представлять логику кода.
#include <iostream>
#include <vector>

int main() {
    int n, L = 0, mx, l = 0, r = 1, a;
    std::cin >> n;
    std::vector<int> Liste_sum(n + 1);

    for (int i = 1; i <= n; i++) {
        std::cin >> a;
        Liste_sum[i] = Liste_sum[i - 1] + a;
    }

    mx = Liste_sum[r] - Liste_sum[l];

    for (int i = 1; i <= n; i++) {
        if (Liste_sum[i] < Liste_sum[L]) {
            L = i;
            // std::cout << L << ' ' << i << ' ' << mx << '\n';
            continue;
        }
        if (Liste_sum[i] - Liste_sum[L] > mx) {
            mx = Liste_sum[i] - Liste_sum[L];
            l = L;
            r = i;
        }
        // std::cout << L << ' ' << i << ' ' << mx << '\n';
    }
    std::cout << l + 1 << ' ' << r << ' ' << mx;
}

-- увеличенный массив + сортировка + елочка

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>


int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    long long w, h, n, m, k, kkk, n_ur, m_ur, a, start_col, len, flag = 0, kk = 0;
    std::cin >> w >> h >> n >> m >> k;
    n += 1;
    m += 1;
    kkk = k + 600000;
    std::vector<long long> nn(n), mm(m), grafstva(kkk);
    if (n != 1) {
        n_ur = 0;
        for (int i = 0; i < n - 1; i++) {
            std::cin >> nn[i];
            a = nn[i];
            nn[i] -= n_ur;
            n_ur = a;
        }
        nn[n - 1] = w - n_ur;
    } else {
        nn[0] = w;
    }
    if (m != 1) {
        m_ur = 0;
        for (int i = 0; i < m - 1; i++) {
            std::cin >> mm[i];
            a = mm[i];
            mm[i] -= m_ur;
            m_ur = a;
        }
        mm[m - 1] = h - m_ur;
    } else {
        mm[0] = h;
    }
    sort(nn.rbegin(), nn.rend());
    sort(mm.rbegin(), mm.rend());

    for (int diag = 0; diag < std::min(m, n); diag++) {
        for (int i = diag; i < n; i++) {
            if (flag == 0 && kk < kkk) {
                grafstva[kk] = nn[i] * mm[diag];
                kk++;
                if (kk == kkk) {
                    sort(grafstva.rbegin(), grafstva.rend());
                    flag = 1;
                    kk = k;
                }
            } else {
                if (kk < kkk) {
                    a = nn[i] * mm[diag];
                    if (a > grafstva[k - 1]) {
                        grafstva[kk] = a;
                        kk++;
                    }
                    if (kk == kkk) {
                        sort(grafstva.rbegin(), grafstva.rend());
                        kk = k;
                    }
                }
            }
        }
        for (int j = diag + 1; j < m; j++) {
            if (flag == 0 && kk < kkk) {
                grafstva[kk] = nn[diag] * mm[j];
                kk++;
                if (kk == kkk) {
                    sort(grafstva.rbegin(), grafstva.rend());
                    flag = 1;
                    kk = k;
                }
            } else {
                if (kk < kkk) {
                    a = nn[diag] * mm[j];
                    if (a > grafstva[k - 1]) {
                        grafstva[kk] = a;
                        kk++;
                    }
                    if (kk == kkk) {
                        sort(grafstva.rbegin(), grafstva.rend());
                        kk = k;
                    }
                }
            }
        }
    }
    sort(grafstva.rend() - kk, grafstva.rend());
    std::cout << grafstva[k - 1] << " " << grafstva[0];
}


-- увеличенный массив + сортировка

#include <iostream>
#include <vector>
#include <algorithm>


int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    long long w, h, n, m, k, kk, kkk, flag, n_ur, m_ur, a;
    std::cin >> w >> h >> n >> m >> k;
    n += 1;
    m += 1;
    kkk = k + 900000;
    std::vector<long long> nn(n), mm(m), grafstva(kkk);
    if (n != 1) {
        n_ur = 0;
        for (int i = 0; i < n - 1; i++) {
            std::cin >> nn[i];
            a = nn[i];
            nn[i] -= n_ur;
            n_ur = a;
        }
        nn[n - 1] = w - n_ur;
    } else {
        nn[0] = w;
    }
    if (m != 1) {
        m_ur = 0;
        for (int i = 0; i < m - 1; i++) {
            std::cin >> mm[i];
            a = mm[i];
            mm[i] -= m_ur;
            m_ur = a;
        }
        mm[m - 1] = h - m_ur;
    } else {
        mm[0] = h;
    }

    sort(nn.rbegin(), nn.rend());
    sort(mm.rbegin(), mm.rend());

    kk = 0;
    flag = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (flag == 0 && kk < kkk) {
                grafstva[kk] = nn[i] * mm[j];
                kk++;
                if (kk == kkk) {
                    sort(grafstva.rbegin(), grafstva.rend());
                    flag = 1;
                    kk = k;
                }
            } else {
                if (kk < kkk) {
                    a = nn[i] * mm[j];
                    if (a > grafstva[k - 1]) {
                        grafstva[kk] = a;
                        kk++;
                    }
                    if (kk == kkk) {
                        sort(grafstva.rbegin(), grafstva.rend());
                        kk = k;
                    }
                }
            }


        }
    }
    sort(grafstva.rend() - kk, grafstva.rend());
    std::cout << grafstva[k - 1] << " " << grafstva[0];
}


-- проход елочкой

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>


int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    long long w, h, n, m, k, n_ur, m_ur, a, start_col, len, flag = 0;
    std::cin >> w >> h >> n >> m >> k;
    n += 1;
    m += 1;
    std::vector<long long> nn(n), mm(m);
    std::multiset<long long> grafstva;
    if (n != 1) {
        n_ur = 0;
        for (int i = 0; i < n - 1; i++) {
            std::cin >> nn[i];
            a = nn[i];
            nn[i] -= n_ur;
            n_ur = a;
        }
        nn[n - 1] = w - n_ur;
    } else {
        nn[0] = w;
    }
    if (m != 1) {
        m_ur = 0;
        for (int i = 0; i < m - 1; i++) {
            std::cin >> mm[i];
            a = mm[i];
            mm[i] -= m_ur;
            m_ur = a;
        }
        mm[m - 1] = h - m_ur;
    } else {
        mm[0] = h;
    }
    sort(nn.rbegin(), nn.rend());
    sort(mm.rbegin(), mm.rend());

    for (int diag = 0; diag < std::min(m, n); diag++) {
        for (int i = diag; i < n; i++) {
            a = nn[i] * mm[diag];
            if (grafstva.size() < k) {
                grafstva.insert(a);
            } else {
                if (a > *grafstva.begin()) {
                    // std::cout << *grafstva.begin() << " ";
                    grafstva.extract(*grafstva.begin());
                    grafstva.insert(a);
                    // std::cout << nn[i] * mm[j] << " ";
                } else {
                    n = i;
                    break;
                }
            }
        }
        for (int j = diag + 1; j < m; j++) {
            a = nn[diag] * mm[j];
            if (grafstva.size() < k) {
                grafstva.insert(a);
            } else {
                if (a > *grafstva.begin()) {
                    // std::cout << *grafstva.begin() << " ";
                    grafstva.extract(*grafstva.begin());
                    grafstva.insert(a);
                    // std::cout << nn[i] * mm[j] << " ";
                } else {
                    m = j;
                    break;
                }
            }
        }
    }

    std::cout << *grafstva.begin() << " " << *grafstva.rbegin();
}

-------------------------------------------

-- проход диагоналями

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>


int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    long long w, h, n, m, k, n_ur, m_ur, a, start_col, len, flag = 0;
    std::cin >> w >> h >> n >> m >> k;
    n += 1;
    m += 1;
    std::vector<long long> nn(n), mm(m);
    std::multiset<long long> grafstva;
    if (n != 1) {
        n_ur = 0;
        for (int i = 0; i < n - 1; i++) {
            std::cin >> nn[i];
            a = nn[i];
            nn[i] -= n_ur;
            n_ur = a;
        }
        nn[n - 1] = w - n_ur;
    } else {
        nn[0] = w;
    }
    if (m != 1) {
        m_ur = 0;
        for (int i = 0; i < m - 1; i++) {
            std::cin >> mm[i];
            a = mm[i];
            mm[i] -= m_ur;
            m_ur = a;
        }
        mm[m - 1] = h - m_ur;
    } else {
        mm[0] = h;
    }
    sort(nn.rbegin(), nn.rend());
    sort(mm.rbegin(), mm.rend());

    for (long long diag = 1; diag < n + m; diag++) {
        start_col = std::max((long long) 0, diag - n);
        len = std::min(diag, std::min(m - start_col, n));
        for (int j = 0; j < len; j++) {
            a = nn[std::min(n, diag) - j - 1] * mm[start_col + j];
            // std::cout << a << '\n';
            if (grafstva.size() < k) {
                grafstva.insert(a);
            } else {
                if (a > *grafstva.begin()) {
                    // std::cout << *grafstva.begin() << " ";
                    grafstva.extract(*grafstva.begin());
                    grafstva.insert(a);
                    // std::cout << nn[i] * mm[j] << " ";
                }
            }
        }
    }

    std::cout << *grafstva.begin() << " " << *grafstva.rbegin();
}

------------------------------------------

#include <iostream> 
#include <vector> 
#include <set> 
#include <algorithm> 


int main() { 
    std::ios::sync_with_stdio(0); 
    std::cin.tie(0); 
    long long w, h, n, m, k, n_ur, m_ur, a, flag = 0; 
    std::cin >> w >> h >> n >> m >> k; 
    n += 1; 
    m += 1; 
    std::vector<long long> nn(n), mm(m); 
    std::multiset<long long> grafstva; 
    if (n != 1) { 
        n_ur = 0; 
        for (int i = 0; i < n - 1; i++) { 
            std::cin >> nn[i]; 
            a = nn[i]; 
            nn[i] -= n_ur; 
            n_ur = a; 
        } 
        nn[n - 1] = w - n_ur; 
    } else { 
        nn[0] = w; 
    } 
    if (m != 1) { 
        m_ur = 0; 
        for (int i = 0; i < m - 1; i++) { 
            std::cin >> mm[i]; 
            a = mm[i]; 
            mm[i] -= m_ur; 
            m_ur = a; 
        } 
        mm[m - 1] = h - m_ur; 
    } else { 
        mm[0] = h; 
    } 
    sort(nn.rbegin(), nn.rend()); 
    sort(mm.rbegin(), mm.rend()); 
    // std::cout << std::min(k / m + 1, n) << ' ' << std::min(k / n + 1, m) << '\n';
    for (int i = 0; i < std::min(k / m + 1, n); i++) { 
        for (int j = 0; j < std::min(k / n + 1, m); j++) { 
            if (i * std::min(k / n + 1, m) + j < k) {
                // std::cout << "+ ";
                grafstva.insert(nn[i] * mm[j]); 
            } else { 
                if (nn[i] * mm[j] > *grafstva.begin()) { 
                    // std::cout << " -+";
                    // std::cout << *grafstva.begin() << " "; 
                    grafstva.extract(*grafstva.begin()); 
                    grafstva.insert(nn[i] * mm[j]); 
                    // std::cout << nn[i] * mm[j] << " "; 
                }
            } 
        } 
    } 
    
    // std::cout << '\n';
    
    for (int i = 0; i < std::min(k / m + 1, n); i++) { 
        for (int j = std::min(k / n + 1, m); j < m; j++) { 
            if (nn[i] * mm[j] > *grafstva.begin()) { 
                grafstva.extract(*grafstva.begin()); 
                grafstva.insert(nn[i] * mm[j]); 
            } else { 
                break; 
            } 
        } 
    } 
    
    for (int i = std::min(k / m + 1, n); i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            if (nn[i] * mm[j] > *grafstva.begin()) { 
                // std::cout << *grafstva.begin() << " "; 
                grafstva.extract(*grafstva.begin()); 
                grafstva.insert(nn[i] * mm[j]); 
                // std::cout << nn[i] * mm[j] << " "; 
            } else { 
                if (j == 0) { 
                    flag = 1; 
                } 
                break; 
            } 
        } 
        if (flag == 1) { 
            break; 
        } 
    } 
    
    std::cout << '\n'; 
    std::cout << *grafstva.begin() << " " << *grafstva.rbegin(); 
}
